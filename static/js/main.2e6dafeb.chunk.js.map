{"version":3,"sources":["logo.svg","TopNav.js","Meme.js","Home.js","SubmitNewMeme.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","TopNav","react_default","a","createElement","react_router_dom","to","className","Component","Meme","this","props","image","class","src","Home","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","endpoint","_this2","fetch","then","res","json","result","console","log","data","setState","isLoaded","error","id","src_TopNav","src_Meme","fireRedirect","handleChange","bind","assertThisInitialized","submitForm","e","defineProperty","target","name","value","preventDefault","from","location","method","action","onSubmit","type","onChange","placeholder","react_router","App","basename","process","exact","path","component","SubmitNewMeme","Boolean","window","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2e6dafeb.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\n// import '../scss/TopNav.scss';\n\nclass TopNav extends Component {\n  render() {\n    return (\n      <nav>\n        <Link to={`/`} className=\"logo\">\n        \tget meme\n        </Link>\n        <Link to={`/submit`}>\n          give meme\n        </Link>\n\n      </nav>\n    );\n  }\n}\n\nexport default TopNav;\n","import React, { Component } from 'react';\nimport './css/App.css';\n\nimport TopNav from './TopNav.js';\n// import MemeGrid from './MemeGrid.js';\n// import Meme from './Meme.js';\n\nclass Meme extends Component {\n\n\trender() {\n\t\tif(this.props.image === \"\") {\n      return <h3>yo wtf there's no meme</h3>;\n    } else {\n      return <img class=\"meme\" src={ this.props.image } />\n    }\n\t}\n}\n\nexport default Meme;","import React, { Component } from 'react';\nimport './css/App.css';\n\nimport TopNav from './TopNav.js';\n// import MemeGrid from './MemeGrid.js';\nimport Meme from './Meme.js';\n\nclass Home extends Component {\n\n\tconstructor(props) {\n        super(props);\n        this.state = {\n            image: ''\n        };\n        this.endpoint = \"https://meme112.herokuapp.com/get_meme_pls\";\n    }\n\n    componentDidMount() {\n    fetch(this.endpoint)\n      .then(res => res.json())\n      .then(\n        (result) => {\n          console.log(result.data.image)\n          this.setState({\n            isLoaded: true,\n            image: result.data.image\n          });\n        },\n        // Note: it's important to handle errors here\n        // instead of a catch() block so that we don't swallow\n        // exceptions from actual bugs in components.\n        (error) => {\n          this.setState({\n            isLoaded: true,\n            error\n          });\n        }\n      );\n  }\n\n\trender() {\n\t\treturn (\n\t\t<div id=\"Home\">\n\t\t\t<TopNav />\n      <main>\n        <Meme image={ this.state.image }/>\n      </main>\n\t\t</div>);\n\t}\n}\n\nexport default Home;","import React, { Component } from 'react';\nimport { Redirect } from 'react-router'\n// import '../scss/App.scss';\n\nimport TopNav from './TopNav.js';\nimport Meme from './Meme.js';\n\nclass Home extends Component {\n\n\tconstructor(props) {\n        super(props);\n        this.state = {\n        \timage: '',\n        \tfireRedirect: false\n        };\n        this.endpoint = \"https://meme112.herokuapp.com/give_meme_pls\";\n        this.handleChange = this.handleChange.bind(this);\n        this.submitForm = this.submitForm.bind(this);\n    }\n\n    handleChange(e) {\n\t\tthis.setState({ [e.target.name]: e.target.value })\n\t}\n\n\tsubmitForm(e) {\n\t\te.preventDefault()\n    \tthis.setState({ fireRedirect: true })\n\t}\n\n\trender() {\n\n\t\tconst { from } = this.props.location.state || '/'\n    \tconst { fireRedirect } = this.state\n\n\t\treturn (\n\t\t\t<div id=\"MemeForm\">\n\t\t\t\t<TopNav />\n\t\t\t\t<main>\n\t\t\t\t\t<h1>GIMME DAT MEME</h1>\n\t\t\t\t\t<form \n\t\t\t\t\t\tmethod=\"POST\" \n\t\t\t\t\t\taction={ this.endpoint }\n\t\t\t\t\t\tonSubmit={this.submitForm}\n\t\t\t\t\t>\n\t\t\t\t\t\t<Meme image={ this.state.image } />\n\t\t\t\t\t\t<label>IMAGE URL</label>\n\t\t\t\t\t\t<input type='text' onChange={ this.handleChange } name='image' value={ this.state.image } placeholder=\"GIMME DAT\"/>\n\t\t\t\t\t\t<input type='submit' />\n\t\t\t\t\t</form>\n\t\t\t\t</main>\n\n\t\t\t\t{ fireRedirect && (\n\t\t          <Redirect to={from || '/'}/>\n\t\t        ) }\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default Home;","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport logo from './logo.svg';\nimport Home from './Home.js';\nimport SubmitNewMeme from './SubmitNewMeme.js';\n\nconst App = () => (\n  <div>\n    <Router basename={ process.env.PUBLIC_URL }>\n      <main>\n        <Route exact path=\"/\" component={ Home } />\n        <Route exact path=\"/submit\" component={ SubmitNewMeme } />\n      </main>\n    </Router>\n  </div>\n)\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}